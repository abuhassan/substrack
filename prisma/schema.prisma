// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
}

// Custom enums
enum BillingCycleType {
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
  LIFETIME
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
  TRIAL
}

// Subscription model
model Subscription {
  id              String             @id @default(cuid())
  name            String
  description     String?
  price           Decimal            @db.Decimal(10, 2)
  currency        String             @default("MYR")
  billingCycle    BillingCycleType
  startDate       DateTime
  nextBillingDate DateTime?
  category        String?
  logo            String?
  website         String?
  status          SubscriptionStatus @default(ACTIVE)
  userId          String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([nextBillingDate])
  @@index([status])
  @@index([category])
  @@index([billingCycle])
}